http://162.55.220.72:5005/first
1. Отправить запрос. (отправлен запрос GET)
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос. - не ушел запрос GET, отпрвила запрос OPTIONS, так стало понятно, что доступны только запросы POST и OPTIONS (также в HEADERS ответа есть эта информация)
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
const responseJson = pm.response.json();
console.log (responseJson);

Ввожу переменные: 
let response_name = responseJson.name;
let response_age = responseJson.age;
let response_salary = responseJson.salary;

let req = request.data;
console.log (req); - для проверки.

let request_name = req.name;
let request_age = req.age;
let request_salary = req.salary;

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Response_name", function () {
    pm.expect(pm.response.text("name")).to.eql("Alena");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Response_age", function () {
    pm.expect(pm.response.text("age")).to.eql("30");
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Response_salary", function () {
    pm.expect(pm.response.text("salary")).to.eql(12000);
});

7. Спарсить request - есть вопрос по этому пункту. 
Я сделала такое: 
let reqData = JSON.stringify(request.data);
console.log(reqData);
{"age":"30","name":"Alena","salary":"12000"}
И дальше ничего не смогла вытянуть из этих данных) 

Одногруппники посоветовали делать так: 
let req = request.data;
console.log (req);
age: "30"
name: "Alena"
salary: "12000"
И из этих данных можно уже вытягивать информацию. 

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("resp_req_name", function () {
    pm.expect(response_name).to.eql(request_name)
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("resp_req_age", function () {
    pm.expect(response_age).to.eql(request_age)
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("resp_req_salary", function () {
    pm.expect(JSON.stringify(response_salary)).to.eql(request_salary)
});
Здесь пришлось добавить в response stringify потому что преобразование request выводит строку. 

11. Вывести в консоль параметр family из response.
let family = responseJson.family;
console.log (family);

12. Проверить что в ответе равно salary*4 (salary забрать из request)
let response_salary_1_5 = responseJson.family.u_salary_1_5_year;
let request_salary_1_5 = request_salary * 4
Переменная request_salary вводилась ранее. 
pm.test("resp_req_salary_1_5", function () {
    pm.expect(JSON.stringify(response_salary_1_5)).to.eql(request_salary_1_5)
});

// http://162.55.220.72:5005/object_info_3
// 1. Отправить запрос.
// Здесь было сложно сразу получить ответ 200 не понимала в чем загвоздка, а оказывается, нужно сразу данные посылать в body при запросе

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json.
let respData = pm.response.json();

// проверка 
// console.log (respData);

// 4. Спарсить request.
// Вариант 1
// let reqData = request.data;
// проверка 
// console.log (reqData);

// Вариант 2
let reqData = pm.request.url.query.toObject();
проверка:
console.log (reqData);

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
let resp_name = respData.name;
let req_name = reqData.name;

pm.test("resp_req_name", function () {
 pm.expect(resp_name).to.eql(req_name)
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
let resp_age = respData.age;
let req_age = reqData.age;

pm.test("resp_req_age", function () {
 pm.expect(resp_age).to.eql(req_age)
});

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
let resp_salary = respData.salary;
let req_salary = reqData.salary;

pm.test("resp_req_salary", function () {
 pm.expect(JSON.stringify(resp_salary)).to.eql(req_salary)
});

// 8. Вывести в консоль параметр family из response.
let family = respData.family;
console.log(family);

// 9. Проверить, что у параметра dog есть параметры name.
let dog = respData.family.pets.dog;

// Проверка:
// console.log(dog);

pm.test("Dog_has_name", function () {
    pm.expect(JSON.stringify(dog)).to.include("name");
});

// 10. Проверить, что у параметра dog есть параметры age.
pm.test("Dog_has_age", function () {
    pm.expect(JSON.stringify(dog)).to.include("age");
});

// 11. Проверить, что параметр name имеет значение Luky.
let dog_name = respData.family.pets.dog.name
pm.test("Dog_name", function () {
    pm.expect(dog_name).to.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4.
let dog_age = respData.family.pets.dog.age
pm.test("Dog_age", function () {
    pm.expect(JSON.stringify(dog_age)).to.eql("4");
});


// http://162.55.220.72:5005/object_info_4
// 1. Отправить запрос.
// // Отправила OPTIONS, доступны HEAD, GET + OPTIONS
// http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let resp_data = pm.response.json();

// 4. Спарсить request.
let req_data = pm.request.url.query.toObject()

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
let resp_name = resp_data.name;
let req_name = req_data.name;

pm.test("resp_req_name", function () {
    pm.expect(resp_name).to.eql(req_name)
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
let resp_age = JSON.stringify(resp_data.age);
let req_age = req_data.age;

pm.test("resp_req_age", function () {
    pm.expect(resp_age).to.eql(req_age)
});

// 7. Вывести в консоль параметр salary из request.
let req_salary = req_data.salary;
console.log(req_salary);

// 8. Вывести в консоль параметр salary из response.
let resp_salary = resp_data.salary;
console.log(resp_salary);
// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(resp_salary[0]);
// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(resp_salary[1]);
// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(resp_salary[2]);
// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Salary_check", function () {
    pm.expect(String(resp_salary[0])).to.eql(req_salary)
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Salary_check", function () {
    pm.expect(resp_salary[1]).to.eql(String(req_salary*2))
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Salary_check_1", function () {
    pm.expect(resp_salary[2]).to.eql(String(req_salary*3))
});

// 15. Создать в окружении переменную name
pm.environment.set("name1");

// 16. Создать в окружении переменную age
pm.environment.set("age1");

// 17. Создать в окружении переменную salary
pm.environment.set("salary1");

// 18. Передать в окружение переменную name
pm.environment.set("name1", req_name);

// 19. Передать в окружение переменную age
pm.environment.set("age1", req_age);

// 20. Передать в окружение переменную salary
pm.environment.set("salary1", req_salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

resp_salary.forEach((item) => {console.log(item)});

